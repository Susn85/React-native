import { Image, StyleSheet,TouchableOpacity,Alert, Text, TextInput, View } from 'react-native'
import React from 'react'
import { Formik } from 'formik'
import { LoginInitialValue, LoginValidationSchema } from './utils'
 function Login() {
  const handleLogin = () => {
    console.log("Values");s
  }
  return (
    <View style={styles.container}>
      <View style={styles.card}>
        <Image
        style={styles.imagebody}
        source={require("../../src/assets/Instagram 1 Logo Png Transparent - Instagram Name Logo Png, Png Download(2400x806) - PngFind.jpg")}
       />
       <Formik initialValues={LoginInitialValue} validationSchema={LoginValidationSchema} onSubmit={handleLogin}>
        {({
        
        })=>{
          return(
            <View>
                 <TouchableOpacity>
                 <Text style={styles.forgot}>forgot password ?</Text>  
                 </TouchableOpacity>     
            </View>
          )
        }}
       </Formik>
      </View>
      <View style={styles.signupbox}>
        <Text>don't have an account?
          <TouchableOpacity>
             <Text style={styles.signup}> signup</Text>
          </TouchableOpacity>
           </Text>
      </View>
    </View>
  )
}

const styles = StyleSheet.create({
  card:{
  flex:0.8,
  justifyContent:'center',
  },
  container:{
    flex:1,
    alignItems:'center',
  },
  imagebody:{
    height:100,
    width:350,
  },
  signupbox:{
    flex:0.2,
    marginBottom:10,
  },
  Text:{
    color:'white',
    fontWeight:'bold',
    fontSize:16,
    margin:5
    },
    forgot:{
      color:'#3797FE'
    },
    input:{
      borderColor:'grey',
      width:350,
      height:50,
      alignSelf:'center',
      margin:10,
      padding: 10,
      borderWidth: 1,
      borderRadius: 8,
    }, 
    button:{
      color:'white',
      borderRadius: 8,
      alignSelf:'center',
      alignItems: 'center',
      backgroundColor: '#3797FE',
      padding:10,
      margin:10,
      width:350,
      height:50,
    },
    signup:{
     color:'#3797FE'
    }
})
export default Login
 {{{
            handleChange,
            handleBlur,
            values,
            touched,
            errors,
            isValid,
          }} => {
            return(
             <View>
               <InputBox
               placeholder={'Username'}
               onchangeText={handleChange('Username')}
               onBlur={handleBlur('Username')}
               value={values.Usernme}
               touched={touched.Username}
               errors={errors.Username}
               />
               <InputBox
               placeholder={'password'}
               onchangeText={handleChange('password')}
               onBlur={handleBlur('password')}
               value={values.password}
               touched={touched.password}
               errors={errors.password}
               />
                {/* <TouchableOpacity
                            style={styles.hidePasswordIcon}
                            // onPress={_onPressToggleHidePassword}
                        >
                            {  (
                                <Icon name="eye-off-outline" size={20}
                                    color="#333" />
                            )  (
                                    <Icon name="eye-outline" color="#318bfb"
                                        size={20} />
                                )
                            }
                        </TouchableOpacity> */}
                {errors && touched && <Text>{errors}</Text>}
               <TouchableOpacity>
                 <Text style={styles.forgot}>forgot password ?</Text>  
                 </TouchableOpacity>   
             </View>
            );
          }}






import { Image, StyleSheet,TouchableOpacity, Text, TextInput, View } from 'react-native'
import React from 'react'
import { Formik } from 'formik'
import { LoginInitialValue, LoginValidationSchema } from './utils'

const Login = (onPress) => {
  const handleLogin = () => {
    console.log(values);
  }
  return (
    <View style={styles.container}>
      <View>
       <Text style={styles.welcomeText}>welcome</Text>
       <Text style={styles.Text}>sign in your account</Text>
       <Formik 
        initialValues={LoginInitialValue}
        validationSchema={LoginValidationSchema}
        onSubmit={handleLogin}>
          {({
            handleChange,
            handleBlur,
            values,
            touched,
            errors,
            isValid,
          }) => {
            return(
             <View style={styles.maincontainer}>
               <TextInput
               style={styles.input}
               onPress={onPress}
               placeholder={'Username'}
               onchangeText={handleChange('Username')}
               onBlur={handleBlur('Username')}
               value={values.Usernme}
               touched={touched.Username}
               errors={errors.Username}
               />
               {errors.Username && touched.Username && <Text style={styles.ertext}>{errors.Username}</Text>}
               <TextInput
               style={styles.input}
               onPress={onPress}
               placeholder={'password'}
               onchangeText={handleChange('password')}
               onBlur={handleBlur('password')}
               value={values.password}
               touched={touched.password}
               errors={errors.password}
               />
              {errors.password && touched.password && <Text style={styles.ertext}>{errors.password}</Text>}    
               <TouchableOpacity>
                  <View>
                    <Text style={styles.signInText}>Login</Text>     
                 </View>
               </TouchableOpacity> 
             <TouchableOpacity>
                <View>
                   <Text style={styles.forgot}>forgot password ?</Text>
                </View>                  
             </TouchableOpacity> 
              <View style={styles.signupbox}>
                 <Text>don't have an account?
                   <TouchableOpacity>
                     <Text style={styles.signup}> signup</Text>
                   </TouchableOpacity>         
                 </Text>        
               </View>          
             </View>             
            );
          }}
        </Formik> 
      </View>
    </View>
  )
}
const styles = StyleSheet.create({
  card:{
  flex:0.8,
  justifyContent:'center',
  },
  container:{
    flex:1,
    alignItems:'center',
  },
  maincontainer:{
   height:68,
  },
  ertext:{
    color:'red',
   
  },
   hidePasswordIcon: {
    position: 'absolute',
    height: 30,
    width: 30,
    justifyContent: 'center',
    alignItems: 'center',
    right: 5,
    top: (44 - 30) / 2,
   },
  signupbox:{
    flex:0.8,
   alignItems:'center',
  },
  Text:{
    color:'black',
    textAlign:'center',
    fontSize:16,
    margin:5
    },
    forgot:{
      color:'#3797FE',
      padding:8,
      
    },
    input:{
      flex:1,
      justifyContent:'center',
      borderColor:'grey',
      width:350,
      height:50,
      alignSelf:'center',
      margin:10,
      padding: 10,
      borderWidth: 1,
      borderRadius: 8,
    }, 
    welcomeText:{
      fontSize:70,
      textAlign:'center',
      fontWeight:'500',
      color:"#262626"
  },
  signInText:{
    color:'white',
    textAlign:"center",
    fontSize:18,
    backgroundColor:"#3797FE",
    width:350,
    height:50,
    margin:10,
    padding:10,
    borderRadius: 8,
   },
    signup:{
     color:'#3797FE',
     alignItems:'centr',
     justifyContent:'cene',
    }
})
export default Login




/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 */

import React from 'react';
import type {PropsWithChildren} from 'react';
import {
  SafeAreaView,
  ScrollView,
  StatusBar,
  StyleSheet,
  Text,
  useColorScheme,
  View,
} from 'react-native';

import {
  Colors,
  DebugInstructions,
  Header,
  LearnMoreLinks,
  ReloadInstructions,
} from 'react-native/Libraries/NewAppScreen';

type SectionProps = PropsWithChildren<{
  title: string;
}>;

function Section({children, title}: SectionProps): React.JSX.Element {
  const isDarkMode = useColorScheme() === 'dark';
  return (
    <View style={styles.sectionContainer}>
      <Text
        style={[
          styles.sectionTitle,
          {
            color: isDarkMode ? Colors.white : Colors.black,
          },
        ]}>
        {title}
      </Text>
      <Text
        style={[
          styles.sectionDescription,
          {
            color: isDarkMode ? Colors.light : Colors.dark,
          },
        ]}>
        {children}
      </Text>
    </View>
  );
}

function App(): React.JSX.Element {
  const isDarkMode = useColorScheme() === 'dark';

  const backgroundStyle = {
    backgroundColor: isDarkMode ? Colors.darker : Colors.lighter,
  };

  return (
    <SafeAreaView style={backgroundStyle}>
      <StatusBar
        barStyle={isDarkMode ? 'light-content' : 'dark-content'}
        backgroundColor={backgroundStyle.backgroundColor}
      />
      <ScrollView
        contentInsetAdjustmentBehavior="automatic"
        style={backgroundStyle}>
        <Header />
        <View
          style={{
            backgroundColor: isDarkMode ? Colors.black : Colors.white,
          }}>
          <Section title="sujeet">
            Edit <Text style={styles.highlight}>App.tsx</Text> to change this
            screen and then come back to see your edits.
          </Section>
          <Section title="name : sujeet nayak">
            <ReloadInstructions />
          </Section>
          <Section title="Debug">
            <DebugInstructions />
          </Section>
          <Section title="Learn More">
            Read the docs to discover what to do next:
          </Section>
          <LearnMoreLinks />
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  sectionContainer: {
    marginTop: 32,
    paddingHorizontal: 24,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '600',
  },
  sectionDescription: {
    marginTop: 8,
    fontSize: 18,
    fontWeight: '400',
  },
  highlight: {
    fontWeight: '700',
  },
});

export default App;


import { Image, StyleSheet,TouchableOpacity, Text,onPress, TextInput, View } from 'react-native'
import React from 'react'
import { Formik } from 'formik'
import { LoginInitialValue, LoginValidationSchema } from './utils'
import { useNavigation } from '@react-navigation/native'
import {InputBox} from './screen/Auth/InputBox'
import {CustomButton} from './screen/Auth/CustomButton' 

const Login = () => { 
 const navigation = useNavigation();
  const handleLogin = () => {
    console.log(Values);
  }
  return (
    <View style={{alignItems:'center'}}>
      <Image
      style={styles.image}
      source={require('../../src/assets/Susan.png')}/>
        <Formik 
        initialValues={LoginInitialValue}
        validationSchema={LoginValidationSchema}
        onSubmit={handleLogin}>
          {({
            handleSubmit,
            handleChange,
            handleBlur,
            values,
            touched,
            errors,
            isValid
          }) => {
            return(
              <View>
                <TextInput
                  style={styles.textinput}
                  placeholder={'Username'}
                  onchangeText={handleChange('Username')}
                  onBlur={handleBlur('Username')}
                  value={values.Usernme}
                  touched={touched.Username}
                  errors={errors.Username}
               />
              {errors.Username && touched.Username && <Text style={{color:'red',paddingLeft:15}}>{errors.Username}</Text>}
                 <TextInput
                  style={styles.textinput}
                  placeholder={'password'}
                   onchangeText={handleChange('password')}
                   onBlur={handleBlur('password')}
                   values={values.password}
                   touched={touched.password}
                   errors={errors.password}
                   secureTextEntry={true}  
               />
             {errors.password  && touched.password && <Text style={{color:'red',paddingLeft:15}}>{errors.password}</Text>} 
               <TouchableOpacity onPress={handleSubmit} >
                    <Text style={styles.signInText}>Login</Text>     
               </TouchableOpacity> 
               <TouchableOpacity>
                  <Text style={{color:'#3797FE'}}>forgot password?</Text>
               </TouchableOpacity> 
              </View>
            )
          }}
        </Formik>
           <View>
             <Text>don't have an account ?
              <TouchableOpacity onPress={()=>{navigation.navigate('Signup')}}>
                <Text style={{color:'#3797FE'}}>sign up</Text>
              </TouchableOpacity>
             </Text>
        </View>
     </View>
  )
}
const styles = StyleSheet.create({
  image:{
    margin:4,
    width:400,
    height: 200,
},
  textinput:{
      justifyContent:'center',
      borderColor:'grey',
      width:350,
      height:50,
      alignSelf:'center',
      margin:5,
      padding:10,
      borderWidth: 1,
      borderRadius: 5,
  },
  signInText:{
    color:'white',
    textAlign:"center",
    alignSelf:'center',
    fontSize:18,
    backgroundColor:"#3797FE",
    width:350,
    height:50,
    margin:10,
    padding:10,
    borderRadius: 8,
  },
})
export default Login;


import { Image, StyleSheet,TouchableOpacity, Text, TextInput, View } from 'react-native'
import React from 'react'
import { Formik } from 'formik'
import { SignupInitialValue, SignupValidationSchema } from './utils'
import {InputBox} from './InputBox'
import {CustomButton} from './CustomButton'
import { useNavigation } from '@react-navigation/native'

const Signup = () => {
 const navigation = useNavigation();
  const handleSignup = (values) => {
    console.log(values);
  }
  return (
    <View style={{alignItems:'center'}}>
      <Text style={styles.headingTitle}>Sign up to your mobile number</Text>
        <Formik 
        initialValues={SignupInitialValue}
        validationSchema={SignupValidationSchema}
        onSubmit={handleSignup}>
          {({
            handleChange,
            handleBlur,
            values,
            touched,
            errors,
            isValid,
          }) => {
            return(
              <View>
                <Text style={styles.Title}>Enter email</Text>
                <TextInput
                  style={styles.textinput}
                  placeholder={'Username'}
                  onchangeText={handleChange('Username')}
                  onBlur={handleBlur('Username')}
                  value={values.Username}
                  touched={touched.Username}
                  errors={errors.Username}
               />
              {errors.Username && touched.Username && <Text style={{color:'red',paddingLeft:15}}>{errors.Username}</Text>}
              <Text style={styles.Title}>Create password</Text>
              <TextInput
                  style={styles.textinput}
                  placeholder={'password'}
                  onchangeText={handleChange('password')}
                  onBlur={handleBlur('password')}
                  values={values.password}
                  touched={touched.password}
                  errors={errors.password}
                  secureTextEntry={true}
               />
              {errors.password && touched.password && <Text style={{color:'red',paddingLeft:15}}>{errors.password}</Text>}
              <Text style={styles.Title}>confirm password</Text>
                 <TextInput
                  style={styles.textinput}
                  placeholder={'password'}
                   onchangeText={handleChange('password')}
                   onBlur={handleBlur('password')}
                   values={values.password}
                   touched={touched.password}
                   errors={errors.password}
                   secureTextEntry={true}
               />
             {errors.password && touched.password && <Text style={{color:'red',paddingLeft:15}}>{errors.password}</Text>}
             <Text style={styles.Title}>Mobile Number</Text>
             <TextInput
                  style={styles.textinput}
                  placeholder={'number'}
                  onchangeText={handleChange('number')}
                  onBlur={handleBlur('number')}
                  values={values.number}
                  touched={touched.number}
                  errors={errors.number}
                  keyboardType={'decimal-pad'}
                  maxLength={10}
               />
              {errors.number && touched.number && <Text style={{color:'red',paddingLeft:15}}>{errors.number}</Text>} 
               <TouchableOpacity onPress={handleSignup} >
                    <Text style={styles.signupText}>Sign up</Text>     
               </TouchableOpacity> 
              </View>
            )
          }}
        </Formik>
           <View>
             <Text>Have an account ?
              <TouchableOpacity onPress={()=>{navigation.getBack()}}>
                <Text style={{color:'#3797FE'}}>Sign in</Text>
              </TouchableOpacity>
             </Text>
        </View>
     </View>
  )
}
const styles = StyleSheet.create({
    headingTitle:{
        fontSize:22,
        fontWeight:'700',
        margin:20,
        height:50,
    },
  textinput:{
      justifyContent:'center',
      borderColor:'grey',
      width:350,
      alignSelf:'center',
      margin:5,
      height:50,
      padding:10,
      borderWidth: 1,
      borderRadius: 5,
  },
  signupText:{
    color:'white',
    textAlign:"center",
    alignSelf:'center',
    fontSize:18,
    backgroundColor:"#3797FE",
    width:350,
    height:50,
    margin:10,
    padding:10,
    borderRadius: 8,
  },
  Title:{
    fontSize:15,
    margin:4,
    paddingLeft:5
  }
})
export default Signup;


import { Image, StyleSheet, TouchableOpacity, Text, TextInput, View } from 'react-native';
import React from 'react';
import { Formik } from 'formik';
import { LoginInitialValue, LoginValidationSchema } from './utils';
import { useNavigation } from '@react-navigation/native';

const Login = () => {
  const navigation = useNavigation();

  const handleLogin = (values) => {
    console.log(values);
  };

  return (
    <View style={{ alignItems: 'center' }}>
      <Image
        style={styles.image}
        source={require('../../src/assets/Susan.png')}
      />
      <Formik
        initialValues={LoginInitialValue}
        validationSchema={LoginValidationSchema}
        onSubmit={handleLogin}>
        {({
          handleSubmit,
          handleChange,
          handleBlur,
          values,
          touched,
          errors,
        }) => (
          <View>
            <TextInput
              style={styles.textinput}
              placeholder="Username"
              onChangeText={handleChange('Username')}
              onBlur={handleBlur('Username')}
              value={values.Username}
            />
            {errors.Username && touched.Username && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.Username}
              </Text>
            )}
            <TextInput
              style={styles.textinput}
              placeholder="Password"
              onChangeText={handleChange('password')}
              onBlur={handleBlur('password')}
              value={values.password}
              secureTextEntry={true}
            />
            <TouchableOpacity
                            style={styles.hidePasswordIcon}
                            // onPress={_onPressToggleHidePassword}
                        >
                            {  (
                                <Icon name="eye-off-outline" size={20}
                                    color="#333" />
                            )  (
                                    <Icon name="eye-outline" color="#318bfb"
                                        size={20} />
                                )
                            }
                        </TouchableOpacity>
            {errors.password && touched.password && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.password}
              </Text>
            )}
            <TouchableOpacity onPress={handleSubmit}>
              <Text style={styles.signInText}>Login</Text>
            </TouchableOpacity>
            <TouchableOpacity>
              <Text style={styles.forgotPasswordText}>Forgot password?</Text>
            </TouchableOpacity>
          </View>
        )}
      </Formik>
      <View style={{ flexDirection: 'row', marginTop: 10 }}>
        <Text>Don't have an account? </Text>
        <TouchableOpacity >
          <Text style={{ color: '#3797FE' }}>Sign up</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  image: {
    margin: 4,
    width: 400,
    height: 200,
  },
  textinput: {
    justifyContent: 'center',
    borderColor: 'grey',
    width: 350,
    height: 50,
    alignSelf: 'center',
    margin: 5,
    padding: 10,
    borderWidth: 1,
    borderRadius: 5,
  },
  signInText: {
    color: 'white',
    textAlign: 'center',
    alignSelf: 'center',
    fontSize: 18,
    backgroundColor: '#3797FE',
    width: 350,
    height: 50,
    margin: 10,
    padding: 10,
    borderRadius: 8,
  },
  forgotPasswordText: {
    color: '#3797FE',
    marginTop: 5,
  },
});

export default Login;


 import * as yup from "yup";
    
export const LoginInitialValue ={
    User_id:'',
    password:'',
};
export const LoginValidationSchema =yup.object().shape({
    Username:yup.string().required("Username is required"),
    password:yup.string().required("password is required"),
})

// export const SignupInitialValue ={
//      User_id:'',
//      password:'',
//      password:'',
//      number:'',
// };
// export const SignupValidationSchema =yup.object().shape({
//      Username:yup.string().email('Invalid email').required("Username is required"),
//      password:yup.string().required("password is required"), 
//     number:yup
//    .string()
//    .min(
//     10,
//     ({min})=>
//         `${'Mobile number must be'} ${min} ${'character'}`,
//    )
//    .required('Mobile number is required')
//     .matches(/^[789]\d{9}$/, 'mobile number should be start from 7,8,9'),
// })



import { View } from 'react-native';
import React from 'react';
import { createStackNavigator } from '@react-navigation/stack';
import { NavigationContainer } from '@react-navigation/native';
import Login from '../screen/Auth/Login';
import Signup from '../screen/Auth/Signup';

const Stack = createStackNavigator();

const StackNavigation = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator screenOptions={{ headerShown: false }}>
        <Stack.Screen name='Login' component={Login} />
        <Stack.Screen name='Signup' component={Signup} />
      </Stack.Navigator>
    </NavigationContainer>
  );    
}
    
export default StackNavigation;


import { StyleSheet,Image, View } from 'react-native'
import React from 'react'

const Welcome = () => {
  return (
    <View style={{alignItems:'center',justifyContent:'center'}}>
      <Image
            style={styles.image}
            source={require('../../src/assets/Susan.png')}/>
    </View>
  )
}
const styles = StyleSheet.create({
    image:{
      margin:4,
      width:400,
      height: 200,
    },
})
export default Welcome;



import React from 'react'
import StackNavigation from './navigator/StackNavigation'

const AppPro = () => {
  return (
    <StackNavigation/>
  );
};

export default AppPro;


import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import Login from '../screen/Auth/Login';
import Signup from '../screen/Auth/Signup';
import Welcome from '../screen/Auth/Welcome';
import HomeScreen from '../screen/HomeScreen';

const Stack = createNativeStackNavigator();

const StackNavigation = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Welcome">
        <Stack.Screen   
          name="Welcome"       
          component={Welcome}       
          options={{ headerShown: false }}      
        />
        <Stack.Screen
          name="Login"
          component={Login}
          options={{ headerShown: false  }}
        />
        <Stack.Screen
          name="Signup"
          component={Signup}
          options={{headerShown: false }}
        />
        <Stack.Screen
        name='HomeScreen'
        component={HomeScreen}
        options={{headerShown: false}}
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default StackNavigation;



import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import Login from '../screen/Auth/Login';
import Signup from '../screen/Auth/Signup';
import Welcome from '../screen/Auth/Welcome';
import HomeScreen from '../screen/HomeScreen';
import ProfileScreen from '../screen/ProfileScreen';
import ReelsScreen from '../screen/ReelsScreen';
import UploadScreen from '../screen/UploadScreen';
import ChatScreen from '../screen/ChatScreen';

const Stack = createNativeStackNavigator();

const StackNavigation = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Welcome">
        {/* Auth Screens */}
        <Stack.Screen   
          name="Welcome"       
          component={Welcome}       
          options={{ headerShown: false }}      
        />
        <Stack.Screen
          name="Login"
          component={Login}
          options={{ headerShown: false }}
        />
        <Stack.Screen
          name="Signup"
          component={Signup}
          options={{ headerShown: false }}
        />
        
        {/* Main Screens */}
        <Stack.Screen
          name="HomeScreen"
          component={HomeScreen}
          options={{ headerShown: false }}
        />
        <Stack.Screen
          name="Profile"
          component={ProfileScreen}
          options={{ headerShown: true, title: 'Profile' }}
        />
        <Stack.Screen
          name="Reels"
          component={ReelsScreen}
          options={{ headerShown: true, title: 'Reels' }}
        />
        <Stack.Screen
          name="Upload"
          component={UploadScreen}
          options={{ headerShown: true, title: 'Upload' }}
        />
        <Stack.Screen
          name="Chat"
          component={ChatScreen}
          options={{ headerShown: true, title: 'Chat' }}
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default StackNavigation;

import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import Ionicons from 'react-native-vector-icons/Ionicons';
import ProfileScreen from '../screen/ProfileScreen';
import ReelsScreen from '../screen/ReelsScreen';
import UploadScreen from '../screen/UploadScreen';
import ChatScreen from '../screen/ChatScreen';
import Login from '../screen/Auth/Login';
import Signup from '../screen/Auth/Signup';
import Welcome from '../screen/Auth/Welcome';

const Stack = createNativeStackNavigator();
const Tab = createBottomTabNavigator();

const TabNavigation = () => {
  return (
    <Tab.Navigator
      screenOptions={({ route }) => ({
        tabBarIcon: ({ focused, color, size }) => {
          let iconName;

          if (route.name === 'Profile') {
            iconName = focused ? 'person' : 'person-outline';
          } else if (route.name === 'Reels') {
            iconName = focused ? 'film' : 'film-outline';
          } else if (route.name === 'Upload') {
            iconName = focused ? 'cloud-upload' : 'cloud-upload-outline';
          } else if (route.name === 'Chat') {
            iconName = focused ? 'chatbubble' : 'chatbubble-outline';
          }

          return <Ionicons name={iconName} size={size} color={color} />;
        },
        tabBarActiveTintColor: '#3797FE',
        tabBarInactiveTintColor: 'gray',
      })}
    >
      <Tab.Screen name="Profile" component={ProfileScreen} />
      <Tab.Screen name="Reels" component={ReelsScreen} />
      <Tab.Screen name="Upload" component={UploadScreen} />
      <Tab.Screen name="Chat" component={ChatScreen} />
    </Tab.Navigator>
  );
};

const StackNavigation = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Welcome">
        <Stack.Screen
          name="Welcome"
          component={Welcome}
          options={{ headerShown: false }}
        />
        <Stack.Screen
          name="Login"
          component={Login}
          options={{ headerShown: false }}
        />
        <Stack.Screen
          name="Signup"
          component={Signup}
          options={{ headerShown: false }}
        />
        <Stack.Screen
          name="HomeScreen"
          component={TabNavigation}
          options={{ headerShown: false }}
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default StackNavigation;

screen/Auth/Signup.jsx

import { StyleSheet, Text,TouchableOpacity, View } from 'react-native'
import React from 'react'
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import Icon2 from 'react-native-vector-icons/MaterialIcons';

const UploadReels = () => {
  return (
    <View>
    <View
    style={{
        flexDirection:'row',
        justifyContent:'space-between',
        margin:10,
        alignItems:'center',
    }}
    >
     <TouchableOpacity onPress={()=>goBack()}>
      <Icon 
      name="keyboard-backspace" 
      size={30} 
      color="black"
      />
     </TouchableOpacity>
        <Text style={{fontSize:20}}>Upload Reels</Text>
    <TouchableOpacity onPress={()=>goBack()}>
      <Icon 
      name="information-outline" 
      size={30} 
      color="black"
      />
     </TouchableOpacity>
     </View>
    <TouchableOpacity style={styles.button} >
      <Icon 
      name="camera-outline" 
      size={40} 
      color="black"
      style={styles.Camera}
      />
      <Text style={styles.CameraText}>Camera</Text>
     </TouchableOpacity>
     <TouchableOpacity style={styles.button} >
      <Icon2 
      name="my-library-add" 
      size={40} 
      color="black"
      style={styles.Camera}
      />
      <Text style={styles.CameraText}>Drafts</Text>
     </TouchableOpacity>
     <TouchableOpacity style={styles.button} >
      <Icon2 
      name="auto-fix-high" 
      size={40} 
      color="black"
      style={styles.Camera}
      />
      <Text style={styles.CameraText}>Templates</Text>
     </TouchableOpacity>
    </View>
  )
}


const styles = StyleSheet.create({
    Camera:{
        flexDirection:'row',
        justifyContent:'space-between',
        margin:5,
        paddingLeft:30,
        alignItems:'center',
        },
        CameraText:{
         paddingLeft:20,
         fontSize:20,
        },
        button:{
            justifyContent:'center',
            margin:10,
            padding:10,
            width:'30%',
            height:100,
            borderRadius:10,
            backgroundColor:'grey',
        }
})
export default UploadReels





import { Alert, Linking, PermissionsAndroid, Platform, StyleSheet, Text, TouchableOpacity, View } from 'react-native'
import React, { useEffect, useState } from 'react'
import  Icon  from 'react-native-vector-icons/MaterialCommunityIcons';
import CameraRoll from '@react-native-camera-roll/camera-roll'

interface VideoProp{
  uri:string;
  playableDuration: Number;
}
const useGallery = ({ pageSize = 30 }) => {
  const [video,setVideo]=useState<VideoProp[]>([]);
  const [nextCursor,setNextCursor]=useState<string|undefined>(undefined);
  const [permissionNotGranted,setPermissionGranted]=useState<Boolean>(false)
  const [isLoading,setIsLoading]=useState(false)
  const [hasNextPage,setHasNextPage]=useState(true)
  const [isLoadingNextPage,setIsLoadingNextPage]=useState(false)

  const LoadingNextPagePictures = async () => {
    if (!hasNextPage) return;
    setIsLoadingNextPage(true)
    try {
      setIsLoadingNextPage(true)
      const { edges, page_info } = await CameraRoll.getPhotos({
        first:pageSize,
        after: nextCursor,
        assetType: 'Videos',
        include: [
         'playableDuration',
         'filename',
         'fileSize',
         'imageSize',
        ],
      });
      const videoExtracted = edges?.map(({ node }: { node: any }) => ({
      uri:node.image.uri,
      playableDuration:node.image.playableDuration,
      filename:node.image.filename,
      filePath:node.image.filePath,
      extension:node.image.extension,
      }));      
      setVideo(prev => [...prev, ...videoExtracted]);
      setNextCursor(page_info.end_cursor);
      setHasNextPage(page_info.has_next_page);
    } catch (error) {
      console.log(error);
      Alert.alert('Error', 'An error occurred while fetching videos');
    } finally {
      setIsLoadingNextPage(false)
    }
  };

const hasAndroidPermission = async () => {
  if(Platform.Version as number >=33){
  const statuses = await PermissionsAndroid.requestMultiple([
    PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE,
    PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO,
  ]);
  return (
    statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE] === PermissionsAndroid.RESULTS.GRANTED &&
    statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO] === PermissionsAndroid.RESULTS.GRANTED
  );
  }else{
    const status = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE);
    return status ===PermissionsAndroid.RESULTS.GRANTED;
  }
};


  const fetchInitial = async () => {
    const hasPermissiion = await hasAndroidPermission();
    if(!hasPermissiion){
      setPermissionGranted(true);
    } else {
      setIsLoading(true);
      await LoadingNextPagePictures();
      setIsLoading(false)
    }
  };
  const fetchVideos = async () => {
    setIsLoading(true);
    await LoadingNextPagePictures();
    setIsLoading(false);
  };

  useEffect(() => {
 if(Platform.OS=='ios'){
  fetchVideos();
 } else{
  fetchInitial();
 }
  }, []);

  return{
  video,
  LoadingNextPagePictures,
  isLoading,
  permissionNotGranted,
  hasNextPage,
  isLoadingNextPage,
 };
};

const ReelsVideo = () => {
  const {
    video,
    isLoading,
    permissionNotGranted,
    hasNextPage,
    isLoadingNextPage
  } = useGallery({pageSize:30});
  console.log(video);

  const handleOpenSetting = () =>{
   Linking.openSettings()
  }
  return (
    <View style={styles.Container}>
      <Text style={{fontSize:17}}>Recent</Text>
      <Icon
       name="chevron-down" 
       size={30} 
       color="black" />
    </View>
    {!permissionNotGranted ? (
      <View style={styles.permissionDeniedContainer}>
       <Text>We need permission to access your gallery. Grant and reopen app</Text>
       <TouchableOpacity onPress={handleOpenSetting}>
        <Text>Open setting</Text>
       </TouchableOpacity>
      </View>
    ) : null}
  </View>
  )
};

const styles = StyleSheet.create({
  Container:{
    gap:4,
    margin:10,
    alignItems:'center',
    flexDirection:'row'
  },
  permissionDeniedContainer:{
    flex:1,
    justifyContent:'center',
    alignItems:'center',
    padding:16,
  }  
})
export default ReelsVideo











import {
  Alert,
  Linking,
  PermissionsAndroid,
  Platform,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from 'react-native';
import React, { useEffect, useState } from 'react';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import CameraRoll from '@react-native-camera-roll/camera-roll';

interface VideoProp {
  uri: string;
  playableDuration: number;
}

const useGallery = ({ pageSize = 30 }) => {
  const [videos, setVideos] = useState<VideoProp[]>([]);
  const [nextCursor, setNextCursor] = useState<string | undefined>(undefined);
  const [permissionDenied, setPermissionDenied] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [hasNextPage, setHasNextPage] = useState(true);
  const [isLoadingNextPage, setIsLoadingNextPage] = useState(false);

  const hasAndroidPermission = async () => {
    if (Number(Platform.Version) >= 33) {
      const statuses = await PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE,
        PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO,
      ]);
      return (
        statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE] === PermissionsAndroid.RESULTS.GRANTED &&
        statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO] === PermissionsAndroid.RESULTS.GRANTED
      );
    } else {
      const status = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE);
      return status === PermissionsAndroid.RESULTS.GRANTED;
    }
  };

  const loadVideos = async () => {
    if (!hasNextPage) return;
    setIsLoadingNextPage(true);
    try {
      const { edges, page_info } = await CameraRoll.getPhotos({
        first: pageSize,
        after: nextCursor,
        assetType: 'Videos',
        include: ['playableDuration', 'filename', 'fileSize', 'imageSize'],
      });
      const videoList = edges.map(({ node }: { node: any }) => ({
        uri: node.image.uri,
        playableDuration: node.image.playableDuration,
      }));
      setVideos((prev) => [...prev, ...videoList]);
      setNextCursor(page_info.end_cursor);
      setHasNextPage(page_info.has_next_page);
    } catch (error) {
      console.error('Error loading videos:', error);
      Alert.alert('Error', 'An error occurred while fetching videos.');
    } finally {
      setIsLoadingNextPage(false);
    }
  };

  const initializeGallery = async () => {
    if (Platform.OS === 'android') {
      const hasPermission = await hasAndroidPermission();
      if (!hasPermission) {
        setPermissionDenied(true);
        return;
      }
    }
    setIsLoading(true);
    await loadVideos();
    setIsLoading(false);
  };

  useEffect(() => {
    initializeGallery();
  }, []);

  return {
    videos,
    loadVideos,
    isLoading,
    permissionDenied,
    hasNextPage,
    isLoadingNextPage,
  };
};

const ReelsVideo = () => {
  const {
    videos,
    isLoading,
    permissionDenied,
    hasNextPage,
    isLoadingNextPage,
    loadVideos,
  } = useGallery({ pageSize: 30 });

  const handleOpenSettings = () => {
    Linking.openSettings();
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Recent</Text>
        <Icon name="chevron-down" size={30} color="black" />
      </View>
      {permissionDenied ? (
        <View style={styles.permissionDeniedContainer}>
          <Text style={styles.permissionText}>We need permission to access your gallery. Grant and reopen the app.</Text>
          <TouchableOpacity style={styles.openSettingsButton} onPress={handleOpenSettings}>
            <Text style={styles.openSettingsText}>Open Settings</Text>
          </TouchableOpacity>
        </View>
      ) : isLoading ? (
        <Text style={styles.loadingText}>Loading videos...</Text>
      ) : (
        <View>
          {videos.map((video, index) => (
            <Text key={index} style={styles.videoItem}>{`Video: ${video.uri}`}</Text>
          ))}
          {isLoadingNextPage && <Text style={styles.loadingText}>Loading more...</Text>}
          {hasNextPage && (
            <TouchableOpacity style={styles.loadMoreButton} onPress={loadVideos}>
              <Text style={styles.loadMoreText}>Load More</Text>
            </TouchableOpacity>
          )}
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  title: {
    fontSize: 17,
  },
  permissionDeniedContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  permissionText: {
    textAlign: 'center',
    marginBottom: 8,
  },
  openSettingsButton: {
    backgroundColor: '#007BFF',
    padding: 10,
    borderRadius: 5,
  },
  openSettingsText: {
    color: '#FFFFFF',
  },
  loadingText: {
    textAlign: 'center',
    marginVertical: 16,
  },
  videoItem: {
    marginBottom: 8,
  },
  loadMoreButton: {
    padding: 10,
    backgroundColor: '#007BFF',
    borderRadius: 5,
    alignItems: 'center',
    marginTop: 16,
  },
  loadMoreText: {
    color: '#FFFFFF',
  },
});

export default ReelsVideo;

import {Alert,Linking,PermissionsAndroid,Platform,StyleSheet,Text,TouchableOpacity,View,} from 'react-native';
import React, { useEffect, useState } from 'react';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import CameraRoll from '@react-native-camera-roll/camera-roll';

interface VideoProp {
  uri: string;
  playableDuration: number;
}

const useGallery = ({ pageSize = 30 }) => {
  const [videos, setVideos] = useState<VideoProp[]>([]);
  const [nextCursor, setNextCursor] = useState<string | undefined>(undefined);
  const [permissionDenied, setPermissionDenied] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [hasNextPage, setHasNextPage] = useState(true);
  const [isLoadingNextPage, setIsLoadingNextPage] = useState(false);

  const hasAndroidPermission = async () => {
    if (Number(Platform.Version) >= 33) {
      const statuses = await PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE,
        PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO,
      ]);
      return (
        statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE] === PermissionsAndroid.RESULTS.GRANTED &&
        statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO] === PermissionsAndroid.RESULTS.GRANTED
      );
    } else {
      const status = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE);
      return status === PermissionsAndroid.RESULTS.GRANTED;
    }
  };

  const loadVideos = async () => {
    if (!hasNextPage) return;
    setIsLoadingNextPage(true);
    try {
      const { edges, page_info } = await CameraRoll.getPhotos({
        first: pageSize,
        after: nextCursor,
        assetType: 'Videos',
        include: ['playableDuration', 'filename', 'fileSize', 'imageSize'],
      });
      const videoList = edges.map(({ node }: { node: any }) => ({
        uri: node.image.uri,
        playableDuration: node.image.playableDuration,
      }));
      setVideos((prev) => [...prev, ...videoList]);
      setNextCursor(page_info.end_cursor);
      setHasNextPage(page_info.has_next_page);
    } catch (error) {
      console.error('Error loading videos:', error);
      Alert.alert('Error', 'An error occurred while fetching videos.');
    } finally {
      setIsLoadingNextPage(false);
    }
  };

  const initializeGallery = async () => {
    if (Platform.OS === 'android') {
      const hasPermission = await hasAndroidPermission();
      if (!hasPermission) {
        setPermissionDenied(true);
        return;
      }
    }
    setIsLoading(true);
    await loadVideos();
    setIsLoading(false);
  };

  useEffect(() => {
    initializeGallery();
  }, []);

  return {
    videos,
    loadVideos,
    isLoading,
    permissionDenied,
    hasNextPage,
    isLoadingNextPage,
  };
};

const ReelsVideo = () => {
  const {
    videos,
    isLoading,
    permissionDenied,
    hasNextPage,
    isLoadingNextPage,
    loadVideos,
  } = useGallery({ pageSize: 30 });

  const handleOpenSettings = () => {
    Linking.openSettings();
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Recent</Text>
        <Icon name="chevron-down" size={30} color="black" />
      </View>
      {permissionDenied ? (
        <View style={styles.permissionDeniedContainer}>
          <Text style={styles.permissionText}>We need permission to access your gallery. Grant and reopen the app.</Text>
          <TouchableOpacity style={styles.openSettingsButton} onPress={handleOpenSettings}>
            <Text style={styles.openSettingsText}>Open Settings</Text>
          </TouchableOpacity>
        </View>
      ) : isLoading ? (
        <Text style={styles.loadingText}>Loading videos...</Text>
      ) : (
        <View>
          {videos.map((video, index) => (
            <Text key={index} style={styles.videoItem}>{`Video: ${video.uri}`}</Text>
          ))}
          {isLoadingNextPage && <Text style={styles.loadingText}>Loading more...</Text>}
          {hasNextPage && (
            <TouchableOpacity style={styles.loadMoreButton} onPress={loadVideos}>
              <Text style={styles.loadMoreText}>Load More</Text>
            </TouchableOpacity>
          )}
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  title: {
    fontSize: 17,
  },
  permissionDeniedContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  permissionText: {
    textAlign: 'center',
    marginBottom: 8,
  },
  openSettingsButton: {
    backgroundColor: '#007BFF',
    padding: 10,
    borderRadius: 5,
  },
  openSettingsText: {
    color: '#FFFFFF',
  },
  loadingText: {
    textAlign: 'center',
    marginVertical: 16,
  },
  videoItem: {
    marginBottom: 8,
  },
  loadMoreButton: {
    padding: 10,
    backgroundColor: '#007BFF',
    borderRadius: 5,
    alignItems: 'center',
    marginTop: 16,
  },
  loadMoreText: {
    color: '#FFFFFF',
  },
});

export default ReelsVideo;




import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, FlatList, TouchableOpacity, Image, PermissionsAndroid } from 'react-native';
import RNFetchBlob from 'rn-fetch-blob';
import { useNavigation } from '@react-navigation/native';

const ReelsVideo = ({ route }) => {
  const { thumb_uri, file_uri } = route.params || {};
  const navigation = useNavigation();
  const [videos, setVideos] = useState([]);
  const [permissionDenied, setPermissionDenied] = useState(false);

  useEffect(() => {
    requestPermission();
  }, []);

  const requestPermission = async () => {
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE
      );

      if (granted === PermissionsAndroid.RESULTS.GRANTED) {
        loadVideos();
      } else {
        setPermissionDenied(true);
      }
    } catch (err) {
      console.warn('Permission error:', err);
    }
  };

  const loadVideos = async () => {
    try {
      const files = await RNFetchBlob.fs.ls(RNFetchBlob.fs.dirs.DownloadDir);
      const videoFiles = files.filter((file) => file.endsWith('.mp4'));
      setVideos(videoFiles);
    } catch (err) {
      console.error('Error loading videos:', err);
    }
  };

  const renderItem = ({ item }) => (
    <TouchableOpacity style={styles.item}>
      <Image source={{ uri: `file://${RNFetchBlob.fs.dirs.DownloadDir}/${item}` }} style={styles.thumbnail} />
      <Text style={styles.videoName}>{item}</Text>
    </TouchableOpacity>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Reels Video</Text>

      {permissionDenied ? (
        <Text style={styles.errorText}>Permission denied to read storage.</Text>
      ) : (
        <FlatList
          data={videos}
          renderItem={renderItem}
          keyExtractor={(item, index) => `${item}-${index}`}
        />
      )}

      {thumb_uri && (
        <View style={styles.previewContainer}>
          <Text style={styles.previewText}>Preview:</Text>
          <Image source={{ uri: thumb_uri }} style={styles.previewImage} />
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    padding: 10,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  errorText: {
    color: 'red',
    fontSize: 16,
    textAlign: 'center',
  },
  item: {
    flexDirection: 'row',
    marginBottom: 10,
    alignItems: 'center',
  },
  thumbnail: {
    width: 60,
    height: 60,
    marginRight: 10,
  },
  videoName: {
    fontSize: 16,
    color: '#333',
  },
  previewContainer: {
    marginTop: 20,
    alignItems: 'center',
  },
  previewText: {
    fontSize: 18,
    marginBottom: 10,
  },
  previewImage: {
    width: 200,
    height: 200,
    resizeMode: 'contain',
  },
});

export default ReelsVideo;



import {
  Alert,
  Linking,
  PermissionsAndroid,
  Platform,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
  FlatList,
  ActivityIndicator,
} from 'react-native';
import React, { useEffect, useState } from 'react';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import CameraRoll from '@react-native-camera-roll/camera-roll';
import Video from 'react-native-video'; 
interface VideoProp {
  uri: string;
  playableDuration: number;
}

const useGallery = ({ pageSize = 30 }) => {
  const [videos, setVideos] = useState<VideoProp[]>([]);
  const [nextCursor, setNextCursor] = useState<string | undefined>(undefined);
  const [permissionDenied, setPermissionDenied] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [hasNextPage, setHasNextPage] = useState(true);

  const hasAndroidPermission = async () => {
    if (Platform.OS === 'android') {
      if (Number(Platform.Version) >= 33) {
        const statuses = await PermissionsAndroid.requestMultiple([
          PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE,
          PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO,
        ]);
        return (
          statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO] === PermissionsAndroid.RESULTS.GRANTED
        );
      } else {
        const status = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE);
        return status === PermissionsAndroid.RESULTS.GRANTED;
      }
    }
    return true;
  };

  const loadVideos = async () => {
    if (!hasNextPage || isLoading) return;
    setIsLoading(true);
    try {
      const { edges, page_info } = await CameraRoll.getPhotos({
        first: pageSize,
        after: nextCursor,
        assetType: 'Videos',
        include: ['playableDuration', 'filename'],
      });
      const videoList = edges.map(({ node }: { node: any }) => ({
        uri: node.image.uri,
        playableDuration: node.image.playableDuration,
      }));
      setVideos((prev) => [...prev, ...videoList]);
      setNextCursor(page_info.end_cursor);
      setHasNextPage(page_info.has_next_page);
    } catch (error) {
      console.error('Error loading videos:', error);
      Alert.alert('Error', 'An error occurred while fetching videos.');
    } finally {
      setIsLoading(false);
    }
  };

  const initializeGallery = async () => {
    if (Platform.OS === 'android') {
      const hasPermission = await hasAndroidPermission();
      if (!hasPermission) {
        setPermissionDenied(true);
        return;
      }
    }
    await loadVideos();
  };

  useEffect(() => {
    initializeGallery();
  }, []);

  return {
    videos,
    loadVideos,
    isLoading,
    permissionDenied,
    hasNextPage,
  };
};

const ReelsVideo = () => {
  const {
    videos,
    isLoading,
    permissionDenied,
    hasNextPage,
    loadVideos,
  } = useGallery({ pageSize: 30 });

  const handleOpenSettings = () => {
    Linking.openSettings();
  };

  const renderVideoItem = ({ item }: { item: VideoProp }) => (
    <View style={styles.videoItemContainer}>
      <Video
        source={{ uri: item.uri }}
        style={styles.videoPlayer}
        controls
        resizeMode="cover"
      />
      <Text style={styles.videoDuration}>{`Duration: ${item.playableDuration}s`}</Text>
    </View>
  );

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Recent</Text>
        <Icon name="chevron-down" size={30} color="black" />
      </View>
      {!permissionDenied ? (
        <View style={styles.permissionDeniedContainer}>
          <Text style={styles.permissionText}>
            We need permission to access your gallery. Grant and reopen the app.
          </Text>
          <TouchableOpacity style={styles.openSettingsButton} onPress={handleOpenSettings}>
            <Text style={styles.openSettingsText}>Open Settings</Text>
          </TouchableOpacity>
        </View>
      ) : isLoading && videos.length === 0 ? (
        <ActivityIndicator size="large" color="#007BFF" style={styles.loadingIndicator} />
      ) : (
        <FlatList
          data={videos}
          renderItem={renderVideoItem}
          keyExtractor={(_, index) => index.toString()}
          onEndReached={hasNextPage ? loadVideos : null}
          onEndReachedThreshold={0.5}
          ListFooterComponent={
            hasNextPage && isLoading ? (
              <ActivityIndicator size="small" color="#007BFF" style={styles.loadingIndicator} />
            ) : null
          }
        />
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-start',
    marginBottom: 16,
  },
  title: {
    fontSize: 17,
  },
  permissionDeniedContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  permissionText: {
    textAlign: 'center',
    marginBottom: 8,
  },
  openSettingsButton: {
    backgroundColor: '#007BFF',
    padding: 10,
    borderRadius: 5,
  },
  openSettingsText: {
    color: '#FFFFFF',
  },
  videoItemContainer: {
    marginBottom: 16,
  },
  videoPlayer: {
    width: '100%',
    height: 200,
    backgroundColor: '#000',
  },
  videoDuration: {
    marginTop: 8,
    fontSize: 14,
    color: '#555',
  },
  loadingIndicator: {
    marginVertical: 16,
  },
});

export default ReelsVideo;






import {Alert,Linking,PermissionsAndroid,Platform,StyleSheet,Text,TouchableOpacity,View,} from 'react-native';
import React, { useEffect, useState } from 'react';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import CameraRoll from '@react-native-camera-roll/camera-roll';

interface VideoProp {
  uri: string;
  playableDuration: number;
}

const useGallery = ({ pageSize = 30 }) => {
  const [videos, setVideos] = useState<VideoProp[]>([]);
  const [nextCursor, setNextCursor] = useState<string | undefined>(undefined);
  const [permissionDenied, setPermissionDenied] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [hasNextPage, setHasNextPage] = useState(true);
  const [isLoadingNextPage, setIsLoadingNextPage] = useState(false);

  const hasAndroidPermission = async () => {
    if (Number(Platform.Version) >= 33) {
      const statuses = await PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE,
        PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO,
      ]);
      return (
        statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE] === PermissionsAndroid.RESULTS.GRANTED &&
        statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO] === PermissionsAndroid.RESULTS.GRANTED
      );
    } else {
      const status = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE);
      return status === PermissionsAndroid.RESULTS.GRANTED;
    }
  };

  const loadVideos = async () => {
    if (!hasNextPage) return;
    setIsLoadingNextPage(true);
    try {
      const { edges, page_info } = await CameraRoll.getAssets({
        first: pageSize,
        after: nextCursor,
        assetType: 'Videos',
        include: ['playableDuration', 'filename', 'fileSize', 'imageSize'],
      });
      const videoList = edges.map(({ node }: { node: any }) => ({
        uri: node.image.uri,
        playableDuration: node.image.playableDuration,
      }));
      setVideos((prev) => [...prev, ...videoList]);
      setNextCursor(page_info.end_cursor);
      setHasNextPage(page_info.has_next_page);
    } catch (error) {
      console.error('Error loading videos:', error);
      Alert.alert('Error', 'An error occurred while fetching videos.');
    } finally {
      setIsLoadingNextPage(false);
    }
  };

  const initializeGallery = async () => {
    if (Platform.OS === 'android') {
      const hasPermission = await hasAndroidPermission();
      if (!hasPermission) {
        setPermissionDenied(true);
        return;
      }
    }
    setIsLoading(true);
    await loadVideos();
    setIsLoading(false);
  };

  useEffect(() => {
    initializeGallery();
  }, []);

  return {
    videos,
    loadVideos,
    isLoading,
    permissionDenied,
    hasNextPage,
    isLoadingNextPage,
  };
};

const ReelsVideo = () => {
  const {
    videos,
    isLoading,
    permissionDenied,
    hasNextPage,
    isLoadingNextPage,
    loadVideos,
  } = useGallery({ pageSize: 30 });

  const handleOpenSettings = () => {
    Linking.openSettings();
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Recent</Text>
        <Icon name="chevron-down" size={30} color="black" />
      </View>
      {!permissionDenied ? (
        <View style={styles.permissionDeniedContainer}>
          <Text style={styles.permissionText}>We need permission to access your gallery. Grant and reopen the app.</Text>
          <TouchableOpacity style={styles.openSettingsButton} onPress={handleOpenSettings}>
            <Text style={styles.openSettingsText}>Open Settings</Text>
          </TouchableOpacity>
        </View>
      ) : isLoading ? (
        <Text style={styles.loadingText}>Loading videos...</Text>
      ) : (
        <View>
          {videos.map((video, index) => (
            <Text key={index} style={styles.videoItem}>{`Video: ${video.uri}`}</Text>
          ))}
          {isLoadingNextPage && <Text style={styles.loadingText}>Loading more...</Text>}
          {hasNextPage && (
            <TouchableOpacity style={styles.loadMoreButton} onPress={loadVideos}>
              <Text style={styles.loadMoreText}>Load More</Text>
            </TouchableOpacity>
          )}
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-start',
    marginBottom: 16,
  },
  title: {
    fontSize: 17,
  },
  permissionDeniedContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  permissionText: {
    textAlign: 'center',
    marginBottom: 8,
  },
  openSettingsButton: {
    backgroundColor: '#007BFF',
    padding: 10,
    borderRadius: 5,
  },
  openSettingsText: {
    color: '#FFFFFF',
  },
  loadingText: {
    textAlign: 'center',
    marginVertical: 16,
  },
  videoItem: {
    marginBottom: 8,
  },
  loadMoreButton: {
    padding: 10,
    backgroundColor: '#007BFF',
    borderRadius: 5,
    alignItems: 'center',
    marginTop: 16,
  },
  loadMoreText: {
    color: '#FFFFFF',
  },
});

export default ReelsVideo;






import {Alert,Linking,PermissionsAndroid,Platform,StyleSheet,Text,TouchableOpacity,View,} from 'react-native';
import React, { useEffect, useState } from 'react';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import CameraRoll from '@react-native-camera-roll/camera-roll';

interface VideoProp {
  uri: string;
  playableDuration: number;
}

const useGallery = ({ pageSize = 30 }) => {
  const [videos, setVideos] = useState<VideoProp[]>([]);
  const [nextCursor, setNextCursor] = useState<string | undefined>(undefined);
  const [permissionDenied, setPermissionDenied] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [hasNextPage, setHasNextPage] = useState(true);
  const [isLoadingNextPage, setIsLoadingNextPage] = useState(false);

  const hasAndroidPermission = async () => {
    if (Number(Platform.Version) >= 33) {
      const statuses = await PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE,
        PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO,
      ]);
      return (
        statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE] === PermissionsAndroid.RESULTS.GRANTED &&
        statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO] === PermissionsAndroid.RESULTS.GRANTED
      );
    } else {
      const status = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE);
      return status === PermissionsAndroid.RESULTS.GRANTED;
    }
  };

  const loadVideos = async () => {
    if (!hasNextPage) return;
    setIsLoadingNextPage(true);
    try {
      const { edges, page_info } = await CameraRoll.getAssets({
        first: pageSize,
        after: nextCursor,
        assetType: 'Videos',
        include: ['playableDuration', 'filename', 'fileSize', 'imageSize'],
      });
      console.log('Full Response:', JSON.stringify({ edges, page_info }, null, 2));
   
    
      const videoList = edges.map(({ node }: { node: any }) => ({
        uri: node.image.uri,
        playableDuration: node.image.playableDuration,
      }));
      setVideos((prev) => [...prev, ...videoList]);
      setNextCursor(page_info.end_cursor);
      setHasNextPage(page_info.has_next_page);
    } catch (error) {
      console.error('Error loading videos:', error);
      Alert.alert('Error', 'An error occurred while fetching videos.');
    } finally {
      setIsLoadingNextPage(false);
    }
  };

  const initializeGallery = async () => {
    if (Platform.OS === 'android') {
      const hasPermission = await hasAndroidPermission();
      if (!hasPermission) {
        setPermissionDenied(true);
        return;
      }
    }
    setIsLoading(true);
    await loadVideos();
    setIsLoading(false);
  };

  useEffect(() => {
    initializeGallery();
  }, []);

  return {
    videos,
    loadVideos,
    isLoading,
    permissionDenied,
    hasNextPage,
    isLoadingNextPage,
  };
};

const ReelsVideo = () => {
  const {
    videos,
    isLoading,
    permissionDenied,
    hasNextPage,
    isLoadingNextPage,
    loadVideos,
  } = useGallery({ pageSize: 30 });

  const handleOpenSettings = () => {
    Linking.openSettings();
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Recent</Text>
        <Icon name="chevron-down" size={30} color="black" />
      </View>
      {!permissionDenied ? (
        <View style={styles.permissionDeniedContainer}>
          <Text style={styles.permissionText}>We need permission to access your gallery. Grant and reopen the app.</Text>
          <TouchableOpacity style={styles.openSettingsButton} onPress={handleOpenSettings}>
            <Text style={styles.openSettingsText}>Open Settings</Text>
          </TouchableOpacity>
        </View>
      ) : isLoading ? (
        <Text style={styles.loadingText}>Loading videos...</Text>
      ) : (
        <View>
          {videos.map((video, index) => (
            <Text key={index} style={styles.videoItem}>{`Video: ${video.uri}`}</Text>
          ))}
          {isLoadingNextPage && <Text style={styles.loadingText}>Loading more...</Text>}
          {hasNextPage && (
            <TouchableOpacity style={styles.loadMoreButton} onPress={loadVideos}>
              <Text style={styles.loadMoreText}>Load More</Text>
            </TouchableOpacity>
          )}
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-start',
    marginBottom: 16,
  },
  title: {
    fontSize: 17,
  },
  permissionDeniedContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  permissionText: {
    textAlign: 'center',
    marginBottom: 8,
  },
  openSettingsButton: {
    backgroundColor: '#007BFF',
    padding: 10,
    borderRadius: 5,
  },
  openSettingsText: {
    color: '#FFFFFF',
  },
  loadingText: {
    textAlign: 'center',
    marginVertical: 16,
  },
  videoItem: {
    marginBottom: 8,
  },
  loadMoreButton: {
    padding: 10,
    backgroundColor: '#007BFF',
    borderRadius: 5,
    alignItems: 'center',
    marginTop: 16,
  },
  loadMoreText: {
    color: '#FFFFFF',
  },
});

export default ReelsVideo;



import {Alert,Linking,PermissionsAndroid,Platform,StyleSheet,Text,TouchableOpacity,View,} from 'react-native';
import React, { useEffect, useState } from 'react';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import CameraRoll from '@react-native-camera-roll/camera-roll';

interface VideoProp {
  uri: string;
  playableDuration: number;
}

const useGallery = ({ pageSize = 30 }) => {
  const [videos, setVideos] = useState<VideoProp[]>([]);
  const [nextCursor, setNextCursor] = useState<string | undefined>(undefined);
  const [permissionDenied, setPermissionDenied] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [hasNextPage, setHasNextPage] = useState(true);
  const [isLoadingNextPage, setIsLoadingNextPage] = useState(false);

  const hasAndroidPermission = async () => {
    if (Number(Platform.Version) >= 33) {
      const statuses = await PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE,
        PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO,
      ]);
      return (
        statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE] === PermissionsAndroid.RESULTS.GRANTED &&
        statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO] === PermissionsAndroid.RESULTS.GRANTED
      );
    } else {
      const status = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE);
      return status === PermissionsAndroid.RESULTS.GRANTED;
    }
  };

  const loadVideos = async () => {
    if (!hasNextPage) return;
    setIsLoadingNextPage(true);
    try {
      const { edges, page_info } = await CameraRoll.getAssets({
        first: pageSize,
        after: nextCursor,
        assetType: 'Videos',
        include: ['playableDuration', 'filename', 'fileSize', 'imageSize'],
      });
      console.log('Full Response:', JSON.stringify({ edges, page_info }, null, 2));
   
    
      const videoList = edges.map(({ node }: { node: any }) => ({
        uri: node.image.uri,
        playableDuration: node.image.playableDuration,
      }));
      setVideos((prev) => [...prev, ...videoList]);
      setNextCursor(page_info.end_cursor);
      setHasNextPage(page_info.has_next_page);
    } catch (error) {
      console.error('Error loading videos:', error);
      Alert.alert('Error', 'An error occurred while fetching videos.');
    } finally {
      setIsLoadingNextPage(false);
    }
  };

  const initializeGallery = async () => {
    if (Platform.OS === 'android') {
      const hasPermission = await hasAndroidPermission();
      if (!hasPermission) {
        setPermissionDenied(true);
        return;
      }
    }
    setIsLoading(true);
    await loadVideos();
    setIsLoading(false);
  };

  useEffect(() => {
    initializeGallery();
  }, []);

  return {
    videos,
    loadVideos,
    isLoading,
    permissionDenied,
    hasNextPage,
    isLoadingNextPage,
  };
};

const ReelsVideo = () => {
  const {
    videos,
    isLoading,
    permissionDenied,
    hasNextPage,
    isLoadingNextPage,
    loadVideos,
  } = useGallery({ pageSize: 30 });

  const handleOpenSettings = () => {
    Linking.openSettings();
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Recent</Text>
        <Icon name="chevron-down" size={30} color="black" />
      </View>
      {!permissionDenied ? (
        <View style={styles.permissionDeniedContainer}>
          <Text style={styles.permissionText}>We need permission to access your gallery. Grant and reopen the app.</Text>
          <TouchableOpacity style={styles.openSettingsButton} onPress={handleOpenSettings}>
            <Text style={styles.openSettingsText}>Open Settings</Text>
          </TouchableOpacity>
        </View>
      ) : isLoading ? (
        <Text style={styles.loadingText}>Loading videos...</Text>
      ) : (
        <View>
          {videos.map((video, index) => (
            <Text key={index} style={styles.videoItem}>{`Video: ${video.uri}`}</Text>
          ))}
          {isLoadingNextPage && <Text style={styles.loadingText}>Loading more...</Text>}
          {hasNextPage && (
            <TouchableOpacity style={styles.loadMoreButton} onPress={loadVideos}>
              <Text style={styles.loadMoreText}>Load More</Text>
            </TouchableOpacity>
          )}
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-start',
    marginBottom: 16,
  },
  title: {
    fontSize: 17,
  },
  permissionDeniedContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  permissionText: {
    textAlign: 'center',
    marginBottom: 8,
  },
  openSettingsButton: {
    backgroundColor: '#007BFF',
    padding: 10,
    borderRadius: 5,
  },
  openSettingsText: {
    color: '#FFFFFF',
  },
  loadingText: {
    textAlign: 'center',
    marginVertical: 16,
  },
  videoItem: {
    marginBottom: 8,
  },
  loadMoreButton: {
    padding: 10,
    backgroundColor: '#007BFF',
    borderRadius: 5,
    alignItems: 'center',
    marginTop: 16,
  },
  loadMoreText: {
    color: '#FFFFFF',
  },
});

export default ReelsVideo;



import React, { useEffect, useState } from 'react';
import { Alert, Button, PermissionsAndroid, Platform, Text, View } from 'react-native';
import { CameraRoll } from "@react-native-camera-roll/camera-roll";


const ReelsVideo= () => {
  const [videos, setVideos] = useState<string[]>([]);

  const requestPermission = async () => {
    if (Platform.OS === 'android') {
      if (Platform.Version >= 33) {
        const statuses = await PermissionsAndroid.requestMultiple([
          PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGES,
          PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO,
        ]);
        return (
          statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO] === PermissionsAndroid.RESULTS.GRANTED
        );
      } else {
        const status = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE
        );
        return status === PermissionsAndroid.RESULTS.GRANTED;
      }
    }
    return true;
  };
  

  const loadVideos = async () => {
    try {
      const result = await CameraRoll.getPhotos({
        first: 10,
        assetType: 'All', 
      });

      console.log('Assets fetched:', result);
      const videoURIs: string[] = result.edges
        .filter((edge: { node: { type: string } }) => edge.node.type.startsWith('video'))
        .map((edge: { node: { image: { uri: string } } }) => edge.node.image.uri);
      setVideos(videoURIs); 
    } catch (error) {
      console.error('Error fetching videos:', error);
      Alert.alert('Error', 'Unable to fetch videos. Check logs for details.');
    }
  };
  useEffect(() => {
    const initialize = async () => {
      const permissionGranted = await requestPermission();
      if (!permissionGranted) {
        Alert.alert('Permission Denied', 'Gallery access is required to fetch videos.');
        return;
      }
      await loadVideos();
    };
    initialize();
  }, []);

  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Text>Video URIs:</Text>
      {videos.length > 0 ? (
        videos.map((uri, index) => <Text key={index}>{uri}</Text>)
      ) : (
        <Text>No videos found</Text>
      )}
      <Button title="Reload Videos" onPress={loadVideos} />
    </View>
  );
};

export default ReelsVideo;


import {Alert,FlatList,Linking,PermissionsAndroid,Platform,StyleSheet,Text,TouchableOpacity,View,ActivityIndicator, Image, Dimensions,} from 'react-native';
import React, { useEffect, useState } from 'react';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import CameraRoll from '@react-native-camera-roll/camera-roll';

interface VideoProp {
  uri: string;
  playableDuration: number;
}

const useGallery = ({ pageSize = 30 }) => {
  const [videos, setVideos] = useState<VideoProp[]>([]);
  const [nextCursor, setNextCursor] = useState<string | undefined>(undefined);
  const [permissionDenied, setPermissionDenied] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [hasNextPage, setHasNextPage] = useState(true);
  const [isLoadingNextPage, setIsLoadingNextPage] = useState(false);

  const hasAndroidPermission = async () => {
    if (Number(Platform.Version) >= 33) {
      const statuses = await PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE,
        PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO,
      ]);
      return (
        statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_IMAGE] === PermissionsAndroid.RESULTS.GRANTED &&
        statuses[PermissionsAndroid.PERMISSIONS.READ_MEDIA_VIDEO] === PermissionsAndroid.RESULTS.GRANTED
      );
    } else {
      const status = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.READ_EXTERNAL_STORAGE);
      return status === PermissionsAndroid.RESULTS.GRANTED;
    }
  };

  const loadVideos = async () => {
    if (!hasNextPage) return;
    setIsLoadingNextPage(true);
    try {
      const { edges, page_info } = await CameraRoll.getAssets({
        first: pageSize,
        after: nextCursor,
        assetType: 'Videos',
        include: ['playableDuration', 'filename', 'fileSize', 'imageSize'],
      });
      console.log('Full Response:', JSON.stringify({ edges, page_info }, null, 2));
   
    
      const videoList = edges.map(({ node }: { node: any }) => ({
        uri: node.image.uri,
        playableDuration: node.image.playableDuration,
      }));
      setVideos((prev) => [...prev, ...videoList]);
      setNextCursor(page_info.end_cursor);
      setHasNextPage(page_info.has_next_page);
    } catch (error) {
      console.error('Error loading videos:', error);
      Alert.alert('Error', 'An error occurred while fetching videos.');
    } finally {
      setIsLoadingNextPage(false);
    }
  };

  const initializeGallery = async () => {
    if (Platform.OS === 'android') {
      const hasPermission = await hasAndroidPermission();
      if (!hasPermission) {
        setPermissionDenied(true);
        return;
      }
    }
    setIsLoading(true);
    await loadVideos();
    setIsLoading(false);
  };

  useEffect(() => {
    initializeGallery();
  }, []);

  return {
    videos,
    loadVideos,
    isLoading,
    permissionDenied,
    hasNextPage,
    isLoadingNextPage,
  };
};

const ReelsVideo = () => {
  const {
    videos,
    isLoading,
    permissionDenied,
    hasNextPage,
    isLoadingNextPage,
    loadVideos,
  } = useGallery({ pageSize: 30 });
console.log('videos:', videos);
  const handleOpenSettings = () => {
    Linking.openSettings();
  };

  const renderItem = ({ item }: { item: VideoProp }) => {
    return (
      <TouchableOpacity style={styles.videoItem} onPress={() => {}}>
        <Image source={{ uri: item.uri }} style={styles.thumbnail} />
      </TouchableOpacity>
    );
  };

  const renderFooter = () => {
    if (!isLoadingNextPage) return null;
    return <ActivityIndicator size="small" color="theme" />;
  }

  const loadNextPagePictures = ({ distanceFromEnd }: { distanceFromEnd: number }) => {
    if (!isLoadingNextPage && hasNextPage) {
      loadVideos();
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Recent</Text>
        <Icon name="chevron-down" size={30} color="black" />
      </View>
      {!permissionDenied ? (
        <View style={styles.permissionDeniedContainer}>
          <Text style={styles.permissionText}>We need permission to access your gallery. Grant and reopen the app.</Text>
          <TouchableOpacity style={styles.openSettingsButton} onPress={handleOpenSettings}>
            <Text style={styles.openSettingsText}>Open Settings</Text>
          </TouchableOpacity>
        </View>
      ) : (
        <>
        {isLoading ? (
        <ActivityIndicator size="small" color="red" />
      ) : 
      <FlatList
        data = {videos}
        renderItem={renderItem}
        keyExtractor={(item,index) =>index.toString()}
        numColumns={4}
        onEndReached={loadNextPagePictures}
        onEndReachedThreshold={0.5}
        ListEmptyComponent={renderFooter}
        />
    }
        </>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 16,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'flex-start',
    marginBottom: 16,
  },
  title: {
    fontSize: 17,
  },
  thumbnail: {
    width: '100%',
    height: '100%',
    resizeMode: 'cover',
  },
  permissionDeniedContainer: {
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16,
  },
  permissionText: {
    textAlign: 'center',
    marginBottom: 8,
  },
  openSettingsButton: {
    backgroundColor: '#007BFF',
    padding: 10,
    borderRadius: 5,
  },
  openSettingsText: {
    color: '#FFFFFF',
  },
  loadingText: {
    textAlign: 'center',
    marginVertical: 16,
  },
  videoItem: {
   width: '25%',
   height: Dimensions.get('window').height * 0.28,
   overflow: 'hidden',
   margin:2,
  },
  loadMoreButton: {
    padding: 10,
    backgroundColor: '#007BFF',
    borderRadius: 5,
    alignItems: 'center',
    marginTop: 16,
  },
  loadMoreText: {
    color: '#FFFFFF',
  },
});

export default ReelsVideo;
import { Image, StyleSheet, TouchableOpacity, Text, TextInput, View, Button } from 'react-native';
import React, { useState } from 'react';
import { Formik } from 'formik';
import { LoginInitialValue, LoginValidationSchema } from './utils';
import { useNavigation } from '@react-navigation/native';
import Icon from 'react-native-vector-icons/Ionicons';

const Login = () => {
 
 const navigation = useNavigation();
  const [hidePassword, setHidePassword] = useState(true);

  const handleLogin = (values) => {
    console.log("Login Details:");
    console.log("Username:", values.Username);
    console.log("Password:", values.password);
  };
  
  return (    
    <View style={{ alignItems: 'center'}}>
      <Image
        style={styles.image}
        source={require('../../src/assets/Susan.png')}
      />
      <Formik
        initialValues={LoginInitialValue}
        validationSchema={LoginValidationSchema}
        onSubmit={handleLogin}>
        {({
          handleSubmit,
          handleChange,
          handleBlur,
          values,
          touched,
          errors,
          onPress,
        }) => (
          <View>
            <TextInput
              style={styles.textinput}
              placeholder="Email address or Phone numbers"
              onChangeText={handleChange('Username')}
              onBlur={handleBlur('Username')}
              value={values.Username}
            />
            {errors.Username && touched.Username && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.Username}
              </Text>
            )}
          <View style={{ position: 'relative' }}>
            <TextInput
              style={styles.textinput}
              placeholder="Password"
              onChangeText={handleChange('password')}
              onBlur={handleBlur('password')}
              value={values.password}
              secureTextEntry={hidePassword}
            />
             <TouchableOpacity
              style={styles.hidePasswordIcon}
              onPress={() => setHidePassword(!hidePassword)}
            >
              <Icon
                name={hidePassword ? 'eye-off-outline' : 'eye-outline'}
                size={24}
                color={'#333'}
              />
            </TouchableOpacity>
          </View>
            {errors.password && touched.password && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.password}
              </Text>
            )}
            <TouchableOpacity onPress={() =>{[ navigation.navigate('HomeScreen'),{handleSubmit}]}} >
              <Text style={styles.signInText}>Login</Text>
            </TouchableOpacity>
            <TouchableOpacity>
              <Text style={styles.forgotPasswordText}>Forgot password?</Text>
            </TouchableOpacity>
          
            const SocialButton = ({ onPress, children, icon }) => (
               <TouchableOpacity style={styles.socialButton} 
               onPress={async()=>{}}
                <Text style={styles.signInText}>continue with google</Text>
                 icon={<Icon name='logo-google'size={24}color={'#333'}/>}

            </TouchableOpacity>
            );
          </View>
        )}
      </Formik>
      <View style={{ flexDirection: 'row', marginTop: 10 }}>
        <Text>Don't have an account? </Text>
        <TouchableOpacity  onPress={() => navigation.navigate('Signup')}>
          <Text style={{ color: '#3797FE' }}>Sign up</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};
};

const styles = StyleSheet.create({
  image: {
    width: 400,
    height: 200,
  },
  textinput: {
    justifyContent: 'center',
    borderColor: 'grey',
    width: 350,
    height: 50,
    alignSelf: 'center',
    margin: 5,
    padding: 10,
    borderWidth: 1,
    borderRadius: 5,
  },
  signInText: {
    color: 'white',
    textAlign: 'center',
    alignSelf: 'center',
    fontSize: 18,
    backgroundColor: '#3797FE',
    width: 350,
    height: 50,
    margin: 10,
    padding: 10,
    borderRadius: 8,
  },
  forgotPasswordText: {
    color: '#3797FE',
    marginTop: 5,
  },
  hidePasswordIcon: {
    position: 'absolute',
    right: 20,
    top: 15,
  },
});

export default Login;
import { Image, StyleSheet, TouchableOpacity, Text, TextInput, View, Button } from 'react-native';
import React, { useState } from 'react';
import { Formik } from 'formik';
import { LoginInitialValue, LoginValidationSchema } from './utils';
import { useNavigation } from '@react-navigation/native';
import Icon from 'react-native-vector-icons/Ionicons';

const Login = () => {
 
 const navigation = useNavigation();
  const [hidePassword, setHidePassword] = useState(true);

  const handleLogin = (values) => {
    console.log("Login Details:");
    console.log("Username:", values.Username);
    console.log("Password:", values.password);
  };
  
  return (    
    <View style={{ alignItems: 'center'}}>
      <Image
        style={styles.image}
        source={require('../../src/assets/Susan.png')}
      />
      <Formik
        initialValues={LoginInitialValue}
        validationSchema={LoginValidationSchema}
        onSubmit={handleLogin}>
        {({
          handleSubmit,
          handleChange,
          handleBlur,
          values,
          touched,
          errors,
          onPress,
        }) => (
          <View>
            <TextInput
              style={styles.textinput}
              placeholder="Email address or Phone numbers"
              onChangeText={handleChange('Username')}
              onBlur={handleBlur('Username')}
              value={values.Username}
            />
            {errors.Username && touched.Username && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.Username}
              </Text>
            )}
          <View style={{ position: 'relative' }}>
            <TextInput
              style={styles.textinput}
              placeholder="Password"
              onChangeText={handleChange('password')}
              onBlur={handleBlur('password')}
              value={values.password}
              secureTextEntry={hidePassword}
            />
             <TouchableOpacity
              style={styles.hidePasswordIcon}
              onPress={() => setHidePassword(!hidePassword)}
            >
              <Icon
                name={hidePassword ? 'eye-off-outline' : 'eye-outline'}
                size={24}
                color={'#333'}
              />
            </TouchableOpacity>
          </View>
            {errors.password && touched.password && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.password}
              </Text>
            )}
            <TouchableOpacity onPress={() =>{[ navigation.navigate('HomeScreen'),{handleSubmit}]}} >
              <Text style={styles.signInText}>Login</Text>
            </TouchableOpacity>
            <TouchableOpacity>
              <Text style={styles.forgotPasswordText}>Forgot password?</Text>
            </TouchableOpacity>
          
            const SocialButton = ({ onPress, children, icon }) => (
               <TouchableOpacity style={styles.socialButton} 
               onPress={async()=>{}}
                <Text style={styles.signInText}>continue with google</Text>
                 icon={<Icon name='logo-google'size={24}color={'#333'}/>}

            </TouchableOpacity>
            );
          </View>
        )}
      </Formik>
      <View style={{ flexDirection: 'row', marginTop: 10 }}>
        <Text>Don't have an account? </Text>
        <TouchableOpacity  onPress={() => navigation.navigate('Signup')}>
          <Text style={{ color: '#3797FE' }}>Sign up</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};
};

const styles = StyleSheet.create({
  image: {
    width: 400,
    height: 200,
  },
  textinput: {
    justifyContent: 'center',
    borderColor: 'grey',
    width: 350,
    height: 50,
    alignSelf: 'center',
    margin: 5,
    padding: 10,
    borderWidth: 1,
    borderRadius: 5,
  },
  signInText: {
    color: 'white',
    textAlign: 'center',
    alignSelf: 'center',
    fontSize: 18,
    backgroundColor: '#3797FE',
    width: 350,
    height: 50,
    margin: 10,
    padding: 10,
    borderRadius: 8,
  },
  forgotPasswordText: {
    color: '#3797FE',
    marginTop: 5,
  },
  hidePasswordIcon: {
    position: 'absolute',
    right: 20,
    top: 15,
  },
});

export default Login;
import { Image, StyleSheet, TouchableOpacity, Text, TextInput, View, Button } from 'react-native';
import React, { useState } from 'react';
import { Formik } from 'formik';
import { LoginInitialValue, LoginValidationSchema } from './utils';
import { useNavigation } from '@react-navigation/native';
import Icon from 'react-native-vector-icons/Ionicons';

const Login = () => {
 
 const navigation = useNavigation();
  const [hidePassword, setHidePassword] = useState(true);

  const handleLogin = (values) => {
    console.log("Login Details:");
    console.log("Username:", values.Username);
    console.log("Password:", values.password);
  };
  
  return (    
    <View style={{ alignItems: 'center'}}>
      <Image
        style={styles.image}
        source={require('../../src/assets/Susan.png')}
      />
      <Formik
        initialValues={LoginInitialValue}
        validationSchema={LoginValidationSchema}
        onSubmit={handleLogin}>
        {({
          handleSubmit,
          handleChange,
          handleBlur,
          values,
          touched,
          errors,
          onPress,
        }) => (
          <View>
            <TextInput
              style={styles.textinput}
              placeholder="Email address or Phone numbers"
              onChangeText={handleChange('Username')}
              onBlur={handleBlur('Username')}
              value={values.Username}
            />
            {errors.Username && touched.Username && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.Username}
              </Text>
            )}
          <View style={{ position: 'relative' }}>
            <TextInput
              style={styles.textinput}
              placeholder="Password"
              onChangeText={handleChange('password')}
              onBlur={handleBlur('password')}
              value={values.password}
              secureTextEntry={hidePassword}
            />
             <TouchableOpacity
              style={styles.hidePasswordIcon}
              onPress={() => setHidePassword(!hidePassword)}
            >
              <Icon
                name={hidePassword ? 'eye-off-outline' : 'eye-outline'}
                size={24}
                color={'#333'}
              />
            </TouchableOpacity>
          </View>
            {errors.password && touched.password && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.password}
              </Text>
            )}
            <TouchableOpacity onPress={() =>{[ navigation.navigate('HomeScreen'),{handleSubmit}]}} >
              <Text style={styles.signInText}>Login</Text>
            </TouchableOpacity>
            <TouchableOpacity>
              <Text style={styles.forgotPasswordText}>Forgot password?</Text>
            </TouchableOpacity>
          
            const SocialButton = ({ onPress, children, icon }) => (
               <TouchableOpacity style={styles.socialButton} 
               onPress={async()=>{}}
                <Text style={styles.signInText}>continue with google</Text>
                 icon={<Icon name='logo-google'size={24}color={'#333'}/>}

            </TouchableOpacity>
            );
          </View>
        )}
      </Formik>
      <View style={{ flexDirection: 'row', marginTop: 10 }}>
        <Text>Don't have an account? </Text>
        <TouchableOpacity  onPress={() => navigation.navigate('Signup')}>
          <Text style={{ color: '#3797FE' }}>Sign up</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};
};

const styles = StyleSheet.create({
  image: {
    width: 400,
    height: 200,
  },
  textinput: {
    justifyContent: 'center',
    borderColor: 'grey',
    width: 350,
    height: 50,
    alignSelf: 'center',
    margin: 5,
    padding: 10,
    borderWidth: 1,
    borderRadius: 5,
  },
  signInText: {
    color: 'white',
    textAlign: 'center',
    alignSelf: 'center',
    fontSize: 18,
    backgroundColor: '#3797FE',
    width: 350,
    height: 50,
    margin: 10,
    padding: 10,
    borderRadius: 8,
  },
  forgotPasswordText: {
    color: '#3797FE',
    marginTop: 5,
  },
  hidePasswordIcon: {
    position: 'absolute',
    right: 20,
    top: 15,
  },
});

export default Login;
import { Image, StyleSheet, TouchableOpacity, Text, TextInput, View, Button } from 'react-native';
import React, { useState } from 'react';
import { Formik } from 'formik';
import { LoginInitialValue, LoginValidationSchema } from './utils';
import { useNavigation } from '@react-navigation/native';
import Icon from 'react-native-vector-icons/Ionicons';

const Login = () => {
 
 const navigation = useNavigation();
  const [hidePassword, setHidePassword] = useState(true);

  const handleLogin = (values) => {
    console.log("Login Details:");
    console.log("Username:", values.Username);
    console.log("Password:", values.password);
  };
  
  return (    
    <View style={{ alignItems: 'center'}}>
      <Image
        style={styles.image}
        source={require('../../src/assets/Susan.png')}
      />
      <Formik
        initialValues={LoginInitialValue}
        validationSchema={LoginValidationSchema}
        onSubmit={handleLogin}>
        {({
          handleSubmit,
          handleChange,
          handleBlur,
          values,
          touched,
          errors,
          onPress,
        }) => (
          <View>
            <TextInput
              style={styles.textinput}
              placeholder="Email address or Phone numbers"
              onChangeText={handleChange('Username')}
              onBlur={handleBlur('Username')}
              value={values.Username}
            />
            {errors.Username && touched.Username && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.Username}
              </Text>
            )}
          <View style={{ position: 'relative' }}>
            <TextInput
              style={styles.textinput}
              placeholder="Password"
              onChangeText={handleChange('password')}
              onBlur={handleBlur('password')}
              value={values.password}
              secureTextEntry={hidePassword}
            />
             <TouchableOpacity
              style={styles.hidePasswordIcon}
              onPress={() => setHidePassword(!hidePassword)}
            >
              <Icon
                name={hidePassword ? 'eye-off-outline' : 'eye-outline'}
                size={24}
                color={'#333'}
              />
            </TouchableOpacity>
          </View>
            {errors.password && touched.password && (
              <Text style={{ color: 'red', paddingLeft: 15 }}>
                {errors.password}
              </Text>
            )}
            <TouchableOpacity onPress={() =>{[ navigation.navigate('HomeScreen'),{handleSubmit}]}} >
              <Text style={styles.signInText}>Login</Text>
            </TouchableOpacity>
            <TouchableOpacity>
              <Text style={styles.forgotPasswordText}>Forgot password?</Text>
            </TouchableOpacity>
          
            const SocialButton = ({ onPress, children, icon }) => (
               <TouchableOpacity style={styles.socialButton} 
               onPress={async()=>{}}
                <Text style={styles.signInText}>continue with google</Text>
                 icon={<Icon name='logo-google'size={24}color={'#333'}/>}

            </TouchableOpacity>
            );
          </View>
        )}
      </Formik>
      <View style={{ flexDirection: 'row', marginTop: 10 }}>
        <Text>Don't have an account? </Text>
        <TouchableOpacity  onPress={() => navigation.navigate('Signup')}>
          <Text style={{ color: '#3797FE' }}>Sign up</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};
};

const styles = StyleSheet.create({
  image: {
    width: 400,
    height: 200,
  },
  textinput: {
    justifyContent: 'center',
    borderColor: 'grey',
    width: 350,
    height: 50,
    alignSelf: 'center',
    margin: 5,
    padding: 10,
    borderWidth: 1,
    borderRadius: 5,
  },
  signInText: {
    color: 'white',
    textAlign: 'center',
    alignSelf: 'center',
    fontSize: 18,
    backgroundColor: '#3797FE',
    width: 350,
    height: 50,
    margin: 10,
    padding: 10,
    borderRadius: 8,
  },
  forgotPasswordText: {
    color: '#3797FE',
    marginTop: 5,
  },
  hidePasswordIcon: {
    position: 'absolute',
    right: 20,
    top: 15,
  },
});

export default Login;
